2020-05-27 00:03 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:03 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:03 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:03 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@43083108
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:03 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:03 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:03 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:03 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:03 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:03 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 00:03 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@670c00c0
2020-05-27 00:03 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:03 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@37cc2acb, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])]),[]>
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=2}]
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=2}]
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:03 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=2}]),[]>
2020-05-27 00:03 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:03 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:03 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getApplyByUserId
2020-05-27 00:03 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:03 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:03 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:03 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:03 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:03 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:03 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:03 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:03 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 10768 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 113ms. Found 0 JDBC repository interfaces.
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 79ms. Found 0 Redis repository interfaces.
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@1715b426' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$83ebc0e7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 00:11 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 00:11 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 00:11 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 00:11 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6994 ms
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 00:11:49",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@570a45f8
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@3e55bd63
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@5a974937
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@5ccddb87
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@3e808647
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@34beda47
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@400eacd6
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@79a6c13a, org.springframework.security.web.context.SecurityContextPersistenceFilter@70d944b9, org.springframework.security.web.header.HeaderWriterFilter@2ff00198, org.springframework.security.web.authentication.logout.LogoutFilter@48ee2436, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1d4d57d9, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@48cac296, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@5e6a551f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@b7d0088, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@24d9cc23, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2f7d69c5, org.springframework.security.web.session.SessionManagementFilter@4c516aab, org.springframework.security.web.access.ExceptionTranslationFilter@6a760a16, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@11583044]
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@3c3cb533
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@35a40ffe
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/1573568497@33e61f61
2020-05-27 00:11 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@4d9e6dec
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@3ecf0019
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 00:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@4f9f5d42
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 00:11 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 00:11 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 00:11 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 00:11 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 00:11 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 00:11 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 00:11 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 00:11 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 00:11 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 00:12 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 20.903 seconds (JVM running for 26.461)
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:12 [http-nio-8888-exec-1] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 00:12 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 00:12 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 45 ms
2020-05-27 00:12 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 00:12 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 00:12 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:12 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 00:12 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:12 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@34beda47
2020-05-27 00:12 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:12 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:12 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@37cc2acb, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])]),[]>
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2d672d14
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@17e1a6da
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=2}]
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=2}]
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:12 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=2}]),[]>
2020-05-27 00:12 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@6757b8c6
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : false
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:12 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=false),[]>
2020-05-27 00:12 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@237085bf
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7b76b0c7
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@524cd2aa
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 00:12 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:12 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:rollback
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2ca22057
2020-05-27 00:12 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:12 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:12 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:12 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 00:12 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:12 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:12 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:12 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:12 [http-nio-8888-exec-7] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at crw.bishe.team.service.UserTeamServiceImpl$$EnhancerBySpringCGLIB$$6520019c.existInTeam(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.UserTeamController.existInTeam(UserTeamController.java:50) ~[classes/:?]
	at crw.bishe.team.controller.project.UserTeamController$$FastClassBySpringCGLIB$$9b594da5.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.UserTeamController$$EnhancerBySpringCGLIB$$6012b75c.existInTeam(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 9040 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 117ms. Found 0 JDBC repository interfaces.
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 73ms. Found 0 Redis repository interfaces.
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@821f53c' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$37a48420] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 00:12 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 00:12 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 00:12 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 00:12 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6648 ms
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 00:12:49",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3b17f1cd
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@34bdb986
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@7897e800
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@69255990
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@3719ad88
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@62671f86
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@1b77445c
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@315eb930, org.springframework.security.web.context.SecurityContextPersistenceFilter@303c5412, org.springframework.security.web.header.HeaderWriterFilter@52634d2d, org.springframework.security.web.authentication.logout.LogoutFilter@41147403, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@50da04b, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@3affd71d, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@1f6a8b38, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3a4a563a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1ab7fd78, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@68af0f22, org.springframework.security.web.session.SessionManagementFilter@1e117cfa, org.springframework.security.web.access.ExceptionTranslationFilter@376ac668, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3d95ebf3]
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@44fcc134
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@59cab2ce
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/1230193081@40916c18
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@21966d48
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@1b0bf400
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 00:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@21f5a07
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 00:12 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 00:12 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 00:12 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 00:12 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 00:12 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 00:12 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 00:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 00:13 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 00:13 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 00:13 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 20.367 seconds (JVM running for 25.451)
2020-05-27 00:13 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 00:13 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 00:13 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:13 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 00:13 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 00:13 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 36 ms
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:21 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 00:21 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:21 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@62671f86
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:21 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@37cc2acb, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])]),[]>
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7c452bb3
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@52a0d9e4
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=2}]
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=2}]
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=2}]),[]>
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@241c2515
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1423de93
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2964bfa9
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:21 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : false
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:21 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=false),[]>
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:21 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@46ee85d5
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a50a4, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=3, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4167bfa9
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:21 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=null),[]>
2020-05-27 00:21 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : NoticeController--->目标方法名为:getNoticesByProId
2020-05-27 00:21 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[NoticeDto(noticeId=19, userId=1, userName=曹荣武, proId=80, proName=大学生组队系统, noticeContent=整个系统计划在2020年5月5日完成主要的功能模块，以及论文撰写和演讲, createTime=2020-05-05, status=0), NoticeDto(noticeId=20, userId=4, userName=管理员1, proId=80, proName=大学生组队系统, noticeContent=完成系统设计阶段，并及时上交论文, createTime=2020-05-05, status=0), NoticeDto(noticeId=21, userId=1, userName=曹荣武, proId=80, proName=大学生组队系统, noticeContent=嘎嘎, createTime=2020-05-05, status=0), NoticeDto(noticeId=22, userId=1, userName=曹荣武, proId=80, proName=大学生组队系统, noticeContent=优秀者
, createTime=2020-05-06, status=0)]),[]>
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@6a75a645
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4c6ef64c
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@21e48f4b
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7bed2163
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@37cc2acb, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=2}]
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=2}]
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=2}]),[]>
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenController--->目标方法名为:getToken
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@523867b5
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenServiceImpl--->目标方法名为:loadUserByUsername
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserRolesMapper--->目标方法名为:findByUserName
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.entity.UserRoles@27cd48f6
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.core.userdetails.User@192e11c: Username: 曹荣武; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: USER
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@604ad8f1
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getUserInfoByUserName
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getUserInfoByUserName
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : JwtConfig--->目标方法名为:getToken
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiLmm7nojaPmraYxMjM0NTYiLCJpYXQiOjE1OTA1MTAxNDksImV4cCI6MTU5MDUxMzc0OX0.GALaqTGy-aSrMFjgJjzV6eK3u67prnj-BJD12Oi6akIoLi5aiLR4YpvelGvrx1mB0E9gknTNj8TWd4DDuNQlJw
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=ok, data={userInfo=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no), loginTime=2020-05-27 00:22:31, auth=[USER], token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiLmm7nojaPmraYxMjM0NTYiLCJpYXQiOjE1OTA1MTAxNDksImV4cCI6MTU5MDUxMzc0OX0.GALaqTGy-aSrMFjgJjzV6eK3u67prnj-BJD12Oi6akIoLi5aiLR4YpvelGvrx1mB0E9gknTNj8TWd4DDuNQlJw}),[]>
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getApplyByUserId
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@377a766c
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:getEnqueueApply
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@21806769
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:getApplyByUserId
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:getApplyByUserId
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:getEnqueueApply
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@3bf6d713
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@559dd34e
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@6d6d4083
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7e096ace
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5b43e19e
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@522ad7c1
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@3549af25
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:22 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@6a0f8f5f
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 00:22 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@40c341a9
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@9c5d80c
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4431d1f0
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5febede7
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:rollback
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@15b011ea
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 00:22 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:22 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:22 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 00:22 [http-nio-8888-exec-10] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at crw.bishe.team.service.UserTeamServiceImpl$$EnhancerBySpringCGLIB$$81696f92.existInTeam(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.UserTeamController.existInTeam(UserTeamController.java:50) ~[classes/:?]
	at crw.bishe.team.controller.project.UserTeamController$$FastClassBySpringCGLIB$$9b594da5.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.UserTeamController$$EnhancerBySpringCGLIB$$c9dca57c.existInTeam(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 11688 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 128ms. Found 0 JDBC repository interfaces.
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 87ms. Found 0 Redis repository interfaces.
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@732179b2' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$aebc49e5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 00:24 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 00:24 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 00:24 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 00:24 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 7592 ms
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 00:24:09",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@5e78d4a2
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@7d35c128
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@16937201
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@21e3aceb
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@476f3e47
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@236e2113
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@732d5a
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@41faf330, org.springframework.security.web.context.SecurityContextPersistenceFilter@4c1bcdb2, org.springframework.security.web.header.HeaderWriterFilter@4dee72eb, org.springframework.security.web.authentication.logout.LogoutFilter@291f49cf, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@ed294a, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@75beb691, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@127e03b3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6de4bcdd, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2a382aaa, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@709ff260, org.springframework.security.web.session.SessionManagementFilter@702d8515, org.springframework.security.web.access.ExceptionTranslationFilter@6ddc6e21, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@325cc7c4]
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@5931b381
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@5cb268aa
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/40981372@134150d4
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@3ff1fbf9
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@5519c967
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@6b8521e7
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 00:24 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 00:24 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 00:24 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 00:24 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 00:24 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 00:24 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 00:24 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 22.147 seconds (JVM running for 27.241)
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 00:24 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 39 ms
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@236e2113
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:24 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:24 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:24 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1f1bc84e
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2573ecb5
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@33704b08
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@490c78e
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@565be1c5
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:24 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:24 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:24 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@70c4e98f
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:24 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5b566, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@407e6076
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:24 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=null),[]>
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@6cdd2dd8
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:24 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 00:24 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 00:24 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:24 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:24 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:24 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@380b808c
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:24 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7a6b6d1e
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2dfbe125
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 00:25 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 00:25 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 00:25 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 00:25 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getApplyByUserId
2020-05-27 00:25 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@42265a17
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2d0f6af9
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5bf8c3ef
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5f0b50ac
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7d0992a9
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 00:25 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 00:25 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 00:25 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1ae9892d
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7750fa91
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@45164d10
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@747a8464
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8a8cb, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@bd6128e
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=null),[]>
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1046b22b
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 00:25 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=null),[]>
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 22780 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 134ms. Found 0 JDBC repository interfaces.
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 77ms. Found 0 Redis repository interfaces.
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@313627bc' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$b9b139d4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 00:58 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 00:58 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 00:58 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 00:58 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 7512 ms
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 00:58:15",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@1c54d012
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@1c5b50df
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@469ab3e5
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@44842e2
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@369d0058
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@324297bb
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@44a1ea7d
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4bfaf84a, org.springframework.security.web.context.SecurityContextPersistenceFilter@2e3f10ef, org.springframework.security.web.header.HeaderWriterFilter@4da2e148, org.springframework.security.web.authentication.logout.LogoutFilter@3e7fc7a8, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@54f3c102, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@6451992e, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@269531f6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4a906c27, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@599538b0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@a42f43c, org.springframework.security.web.session.SessionManagementFilter@2d65128c, org.springframework.security.web.access.ExceptionTranslationFilter@6c6fdc4b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6940e037]
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@3dc95272
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@3fdbc460
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/566069796@6bdea585
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@642e4c40
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@11e50259
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@79ccb9d5
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 00:58 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 00:58 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 00:58 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 00:58 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 00:58 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 00:58 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 00:58 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 21.969 seconds (JVM running for 27.352)
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 00:58 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:00 [http-nio-8888-exec-2] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 01:00 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 01:00 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 45 ms
2020-05-27 01:00 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:00 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:00 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:00 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:00 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:00 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:00 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:00 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:00 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:00 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:00 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 01:00 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 01:00 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 01:00 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@324297bb
2020-05-27 01:00 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:00 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:00 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getApplyByUserId
2020-05-27 01:00 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:00 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:00 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 01:00 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 01:00 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 01:00 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:00 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:00 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:00 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:20 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:20 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 01:20 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 01:20 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 01:20 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:20 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:20 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:20 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:20 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:20 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:20 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:20 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@646f57ec
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@63bc942
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:20 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:20 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4297ae2b
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:20 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1fda536a
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@66a721d4
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4a6bff66
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1e70d785
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:21 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 01:21 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 01:21 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:21 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:21 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@21a62a53
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@61230567
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@e44a087
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@3fecb614
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@61932ac0
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@28fa2bbc
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2ea94999
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1706d389
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@26d823e7
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@42746e7f
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4deb7bff
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@263b9bcd
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : FilesController--->目标方法名为:getFilesByProId
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1a127ceb
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : FilesServiceImpl--->目标方法名为:getFilesByProId
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : FilesMapper--->目标方法名为:getFilesByProId
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [FilesDto(fileId=14, fileName=team.sql, userId=1, userName=曹荣武, fileLink=D:/upload/team.sql, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=15, fileName=相似片段.html, userId=1, userName=曹荣武, fileLink=D:/upload/相似片段.html, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=16, fileName=全文对比.html, userId=1, userName=曹荣武, fileLink=D:/upload/全文对比.html, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=17, fileName=全文对比.html, userId=1, userName=曹荣武, fileLink=D:/upload/全文对比.html, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=18, fileName=demo中文 (1).xlsx, userId=2, userName=小小明, fileLink=D:/upload/demo中文 (1).xlsx, proId=80, proName=大学生组队系统, uploadTime=2020-05-10), FilesDto(fileId=19, fileName=新建文本文档.txt, userId=2, userName=小小明, fileLink=D:/upload/新建文本文档.txt, proId=80, proName=大学生组队系统, uploadTime=2020-05-26)]
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [FilesDto(fileId=14, fileName=team.sql, userId=1, userName=曹荣武, fileLink=D:/upload/team.sql, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=15, fileName=相似片段.html, userId=1, userName=曹荣武, fileLink=D:/upload/相似片段.html, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=16, fileName=全文对比.html, userId=1, userName=曹荣武, fileLink=D:/upload/全文对比.html, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=17, fileName=全文对比.html, userId=1, userName=曹荣武, fileLink=D:/upload/全文对比.html, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=18, fileName=demo中文 (1).xlsx, userId=2, userName=小小明, fileLink=D:/upload/demo中文 (1).xlsx, proId=80, proName=大学生组队系统, uploadTime=2020-05-10), FilesDto(fileId=19, fileName=新建文本文档.txt, userId=2, userName=小小明, fileLink=D:/upload/新建文本文档.txt, proId=80, proName=大学生组队系统, uploadTime=2020-05-26)]
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[FilesDto(fileId=14, fileName=team.sql, userId=1, userName=曹荣武, fileLink=D:/upload/team.sql, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=15, fileName=相似片段.html, userId=1, userName=曹荣武, fileLink=D:/upload/相似片段.html, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=16, fileName=全文对比.html, userId=1, userName=曹荣武, fileLink=D:/upload/全文对比.html, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=17, fileName=全文对比.html, userId=1, userName=曹荣武, fileLink=D:/upload/全文对比.html, proId=80, proName=大学生组队系统, uploadTime=2020-05-05), FilesDto(fileId=18, fileName=demo中文 (1).xlsx, userId=2, userName=小小明, fileLink=D:/upload/demo中文 (1).xlsx, proId=80, proName=大学生组队系统, uploadTime=2020-05-10), FilesDto(fileId=19, fileName=新建文本文档.txt, userId=2, userName=小小明, fileLink=D:/upload/新建文本文档.txt, proId=80, proName=大学生组队系统, uploadTime=2020-05-26)]),[]>
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : NoticeController--->目标方法名为:getNoticesByProId
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 01:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[NoticeDto(noticeId=19, userId=1, userName=曹荣武, proId=80, proName=大学生组队系统, noticeContent=整个系统计划在2020年5月5日完成主要的功能模块，以及论文撰写和演讲, createTime=2020-05-05, status=0), NoticeDto(noticeId=20, userId=4, userName=管理员1, proId=80, proName=大学生组队系统, noticeContent=完成系统设计阶段，并及时上交论文, createTime=2020-05-05, status=0), NoticeDto(noticeId=21, userId=1, userName=曹荣武, proId=80, proName=大学生组队系统, noticeContent=嘎嘎, createTime=2020-05-05, status=0), NoticeDto(noticeId=22, userId=1, userName=曹荣武, proId=80, proName=大学生组队系统, noticeContent=优秀者
, createTime=2020-05-06, status=0)]),[]>
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@3370f142
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@59731778
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@22c10dc2
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@669610d
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 01:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2518f90b
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@57f525d8
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@35266600
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2e49a5ff
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:41 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 01:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 01:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@27476221
2020-05-27 01:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 01:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 01:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:rollback
2020-05-27 01:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:41 [http-nio-8888-exec-10] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at crw.bishe.team.service.TaskServiceImpl$$EnhancerBySpringCGLIB$$117f5c4f.updateTaskByTaskId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TaskController.updateTaskByTaskId(TaskController.java:108) ~[classes/:?]
	at crw.bishe.team.controller.project.TaskController$$FastClassBySpringCGLIB$$5bc66ea2.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TaskController$$EnhancerBySpringCGLIB$$f5ae1dcf.updateTaskByTaskId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 01:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 01:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 01:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 01:41 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 01:41 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:41 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 01:41 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 01:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 01:41 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@671c2327
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:41 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7cce84cf
2020-05-27 01:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 01:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:41 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4e8c4699
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@3befebce
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@3b50f3fe
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@45e76a38
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@218dc0cb
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 01:55 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:55 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 01:55 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 01:55 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 01:55 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 01:55 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 01:55 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4e13989
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 01:55 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:55 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2d1440ae
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 01:55 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 01:55 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 01:55 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 01:55 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 01:55 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getApplyByUserId
2020-05-27 01:55 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:55 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:55 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:55 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@449dd568
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:55 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:55 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@50e6d482
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:55 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:55 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:55 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1897274d
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4a5f1f3d
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4cbab511
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5c0a4963
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@f69b4a9
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@66c1b20f
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2e184c66
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5a39d0bc
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@471fca10
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@130820e2
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@589666a4
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@354cc5da
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=65, userId=1, userName=曹荣武, teamId=104, teamName=京东团队, isLeader=1)]
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=65, userId=1, userName=曹荣武, teamId=104, teamName=京东团队, isLeader=1)]
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=65, userId=1, userName=曹荣武, teamId=104, teamName=京东团队, isLeader=1)]),[]>
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@ba03606
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7c0953e7
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2a05fd2d
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[])
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@187fe439
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@632e7a46
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@46017843
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@19891fc2
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=84, userId=1, userName=曹荣武, teamId=120, teamName=团队1221, isLeader=1)]
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[])
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=84, userId=1, userName=曹荣武, teamId=120, teamName=团队1221, isLeader=1)]
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[])
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=84, userId=1, userName=曹荣武, teamId=120, teamName=团队1221, isLeader=1)]),[]>
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[])),[]>
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@19862a5
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@583215ee
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7b41bf18
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@81e2a0c
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@3141d234
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@3893cbe4
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 01:56 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2838fbc5
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 01:56 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1f7b34db
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5b48f65a
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2d93627
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5ce89513
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 01:56 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@23d33351
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:rollback
2020-05-27 01:56 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 01:56 [http-nio-8888-exec-7] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at crw.bishe.team.service.TaskServiceImpl$$EnhancerBySpringCGLIB$$117f5c4f.updateTaskByTaskId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TaskController.updateTaskByTaskId(TaskController.java:108) ~[classes/:?]
	at crw.bishe.team.controller.project.TaskController$$FastClassBySpringCGLIB$$5bc66ea2.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TaskController$$EnhancerBySpringCGLIB$$f5ae1dcf.updateTaskByTaskId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getApplyByUserId
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 20:30 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 20:30 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@321bc31a
2020-05-27 20:30 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@6f3750b5
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 20:30 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1bee5f3e
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@63fe4f0f
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@26c3d0d2
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5b41fd
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@43cd27a9
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 20:30 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 20:30 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 20:30 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 20:30 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 20:30 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@40758ec7
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 20:30 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 20:30 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1f8c9391
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@f18ef5a
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@58a676cf
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@743a5099
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2af2a79c
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:30 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 20:31 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:31 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:31 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 20:31 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:31 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@eab22ad
2020-05-27 20:31 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 20:31 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 20:31 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:rollback
2020-05-27 20:31 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:31 [http-nio-8888-exec-4] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at crw.bishe.team.service.TaskServiceImpl$$EnhancerBySpringCGLIB$$117f5c4f.updateTaskByTaskId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TaskController.updateTaskByTaskId(TaskController.java:108) ~[classes/:?]
	at crw.bishe.team.controller.project.TaskController$$FastClassBySpringCGLIB$$5bc66ea2.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TaskController$$EnhancerBySpringCGLIB$$f5ae1dcf.updateTaskByTaskId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 20692 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94ms. Found 0 JDBC repository interfaces.
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 67ms. Found 0 Redis repository interfaces.
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@5ec67393' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$5cc1ee35] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 20:53 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 20:53 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 20:53 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 20:53 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6539 ms
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 20:53:53",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@63b9ee3a
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@660f8975
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@f20629c
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@53f9645c
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@c714ea1
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@12449862
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@3e317b0c
2020-05-27 20:53 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@104d0bf3, org.springframework.security.web.context.SecurityContextPersistenceFilter@71550d33, org.springframework.security.web.header.HeaderWriterFilter@e73551a, org.springframework.security.web.authentication.logout.LogoutFilter@7a672b82, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2e54f9e4, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@169f6e70, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@1278a9f4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@28f9cae7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2d34cd51, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2d837211, org.springframework.security.web.session.SessionManagementFilter@67c63eb, org.springframework.security.web.access.ExceptionTranslationFilter@2fcbd35, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4c1ded57]
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@7183e256
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@64b71560
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/1763303385@51b8706a
2020-05-27 20:53 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@5b4ac302
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@75cbb5eb
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 20:53 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@40c343f4
2020-05-27 20:54 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 20:54 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 20:54 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 20:54 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 20:54 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 20:54 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 20:54 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 20:54 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 20:54 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 20:54 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 20:54 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 19.946 seconds (JVM running for 24.919)
2020-05-27 20:54 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 20:54 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 20:54 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 20:54 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 20:54 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 42 ms
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@12449862
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@6c0d4e0d
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@f429c92
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@6296658e
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2438cf87
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@21dfd28c
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7ee3caba
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85ec03, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=2, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@8183c9d
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=null),[]>
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@29887184
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1ec0f1a4
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@1f0ebfa9
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5f818ee7
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5840f10d
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@433e8c6a
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2ef77460
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 20:54 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 20:54 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5bdc0c2
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@3ec3acbd
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@13bd51e
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@ba9b672
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 20:54 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 19496 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 51ms. Found 0 JDBC repository interfaces.
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18ms. Found 0 Redis repository interfaces.
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@e9a2bb0' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$bbc28d4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 21:11 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 21:11 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 21:11 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 21:11 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 5358 ms
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 21:11:51",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@78b524f7
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@14989c97
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@7879c4f4
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@21e3f994
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@6432f7c9
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@51e918fe
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@24d2300f
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@cf64fe8, org.springframework.security.web.context.SecurityContextPersistenceFilter@616279fa, org.springframework.security.web.header.HeaderWriterFilter@d50e646, org.springframework.security.web.authentication.logout.LogoutFilter@385e8d03, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@511b83d0, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@4b5a28d2, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@1af5ae6d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2267e106, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@277a0acc, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3a3cf737, org.springframework.security.web.session.SessionManagementFilter@4f3c5b93, org.springframework.security.web.access.ExceptionTranslationFilter@6a0afd86, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@57506de]
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@165dfe1
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@463713a6
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/1189217230@1d31a634
2020-05-27 21:11 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@79e7d0b
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@30b3f835
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 21:11 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@3ccf114a
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 21:11 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 21:11 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 21:11 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 21:11 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 21:11 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 21:11 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 21:12 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 21:12 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 21:12 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 18.679 seconds (JVM running for 22.626)
2020-05-27 21:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 21:12 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 21:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 21:12 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 21:12 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 40 ms
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@51e918fe
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getApplyByUserId
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 21:15 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 21:15 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@3691738f
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@73abb768
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@76e164ca
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@731c0fe1
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2a3b8146
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@2aefbe1a
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@455dd90d
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:rollback
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 21:15 [http-nio-8888-exec-4] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at crw.bishe.team.service.UserTeamServiceImpl$$EnhancerBySpringCGLIB$$87ee2c34.existInTeam(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.UserTeamController.existInTeam(UserTeamController.java:50) ~[classes/:?]
	at crw.bishe.team.controller.project.UserTeamController$$FastClassBySpringCGLIB$$9b594da5.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.UserTeamController$$EnhancerBySpringCGLIB$$e5cc5527.existInTeam(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 21:15 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@88b3f20
2020-05-27 21:15 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@571fc707
2020-05-27 21:15 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 21:15 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@cb9aff0
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@7f9b9d90
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@57b944c2
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5dd36f87
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:15 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4f8b1845
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:rollback
2020-05-27 21:15 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:15 [http-nio-8888-exec-4] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at crw.bishe.team.service.TaskServiceImpl$$EnhancerBySpringCGLIB$$9c9328fd.updateTaskByTaskId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TaskController.updateTaskByTaskId(TaskController.java:108) ~[classes/:?]
	at crw.bishe.team.controller.project.TaskController$$FastClassBySpringCGLIB$$5bc66ea2.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TaskController$$EnhancerBySpringCGLIB$$24fdbe3e.updateTaskByTaskId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 21:23 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:23 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:23 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:23 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:23 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 21:23 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 21:23 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:23 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 21:23 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:23 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@732165a1
2020-05-27 21:23 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@4180c8e7
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 21:23 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:23 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:23 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 22752 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 122ms. Found 0 JDBC repository interfaces.
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94ms. Found 0 Redis repository interfaces.
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@10ec751d' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$ea1e5f1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 21:25 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 21:25 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 21:25 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 21:25 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6571 ms
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 21:25:29",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@534a0612
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@5004dfb5
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@6654536a
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@72c4e90
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@676084c3
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@6eabcfdb
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@13d4ba8d
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4b6ebb79, org.springframework.security.web.context.SecurityContextPersistenceFilter@7fea60d, org.springframework.security.web.header.HeaderWriterFilter@730a9fab, org.springframework.security.web.authentication.logout.LogoutFilter@d84831f, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4b7f2e9a, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@2e0416d, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@3dd6bf9d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6bc88393, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@fb101ff, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6d39af5f, org.springframework.security.web.session.SessionManagementFilter@250b36eb, org.springframework.security.web.access.ExceptionTranslationFilter@18706a6f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7d69bb3c]
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@70b4e3f2
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@328cbaaa
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/1447309286@1969ee5c
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@7ee2d7f8
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@54735597
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@68e88ef6
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 21:25 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 21:25 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 21:25 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 21:25 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 21:25 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 21:25 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 19.644 seconds (JVM running for 23.487)
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 21:25 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 18024 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 111ms. Found 0 JDBC repository interfaces.
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 69ms. Found 0 Redis repository interfaces.
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@20b7a027' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:25 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$e864764c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:26 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 21:26 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 21:26 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 21:26 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 21:26 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 21:26 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6299 ms
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 21:26:02",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@440dd830
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@6a01661c
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@7b32e378
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@4c3afb01
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@927c3ca
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@56760982
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@4c0141a0
2020-05-27 21:26 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5e8288f4, org.springframework.security.web.context.SecurityContextPersistenceFilter@2b064f21, org.springframework.security.web.header.HeaderWriterFilter@69537c0c, org.springframework.security.web.authentication.logout.LogoutFilter@75a55287, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3e8ae013, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@4f69c553, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@6877822e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@a8c8b8b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@79f7ec7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2180dc88, org.springframework.security.web.session.SessionManagementFilter@231c1180, org.springframework.security.web.access.ExceptionTranslationFilter@6cfe840, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2990226f]
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@7abfc101
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@ed465b9
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/1185671932@53a6732a
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@6afcb3d2
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@5a334064
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@60b0823e
2020-05-27 21:26 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 21:26 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 21:26 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 21:26 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 21:26 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 21:26 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 21:26 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 21:26 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 21:26 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 21:26 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 21:26 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 18.821 seconds (JVM running for 23.102)
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 21:26 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 39 ms
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@56760982
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 21:26 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 21:26 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 21:26 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:26 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 21:26 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 21:26 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 21:26 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 21:26 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:26 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:26 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 21:26 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 21:26 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 21:26 [http-nio-8888-exec-3] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 21:26 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:26 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:26 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 21:26 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:26 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:26 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 21:26 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 21:26 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 21:26 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 21:26 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:26 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 21:26 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 21:26 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 21:26 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 21:26 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 21:26 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 21:26 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:26 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 21:26 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:26 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:26 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 21:26 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 21:26 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 21:26 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 21:26 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 21:26 [http-nio-8888-exec-10] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'arg0' not found. Available parameters are [teamId, userId, param1, param2]] with root cause
org.apache.ibatis.binding.BindingException: Parameter 'arg0' not found. Available parameters are [teamId, userId, param1, param2]
	at org.apache.ibatis.binding.MapperMethod$ParamMap.get(MapperMethod.java:212) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.reflection.wrapper.MapWrapper.get(MapWrapper.java:45) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.createCacheKey(BaseExecutor.java:219) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.createCacheKey(CachingExecutor.java:146) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:84) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy234.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy125.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy161.existInTeam(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy162.existInTeam(Unknown Source) ~[?:?]
	at crw.bishe.team.service.UserTeamServiceImpl.existInTeam(UserTeamServiceImpl.java:49) ~[classes/:?]
	at crw.bishe.team.service.UserTeamServiceImpl$$FastClassBySpringCGLIB$$d0a83cae.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.UserTeamServiceImpl$$EnhancerBySpringCGLIB$$9f14b5e0.existInTeam(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.UserTeamController.existInTeam(UserTeamController.java:50) ~[classes/:?]
	at crw.bishe.team.controller.project.UserTeamController$$FastClassBySpringCGLIB$$9b594da5.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.UserTeamController$$EnhancerBySpringCGLIB$$5962bb25.existInTeam(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 10076 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 127ms. Found 0 JDBC repository interfaces.
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 51ms. Found 0 Redis repository interfaces.
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@410d8ac1' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$4a5155e2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 21:27 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 21:27 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 21:27 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 21:27 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6443 ms
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 21:27:46",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@244f09b2
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@61a0fad2
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@118770e3
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@4cdc0e08
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@28f2937b
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@771df1c9
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@9d0039e
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3aea338f, org.springframework.security.web.context.SecurityContextPersistenceFilter@77e65e3a, org.springframework.security.web.header.HeaderWriterFilter@1e160ad3, org.springframework.security.web.authentication.logout.LogoutFilter@671a0098, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2fc15210, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@3163eeb1, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@5669ff59, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@11cbe58f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5efb382b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@43cd1fa0, org.springframework.security.web.session.SessionManagementFilter@141df897, org.springframework.security.web.access.ExceptionTranslationFilter@3a0d5d3a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@382e0f7e]
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@1536428c
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@3101f649
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/74875853@4889bc55
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@2c277e6f
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@3ee6e17c
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@6c7b248d
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 21:27 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 21:27 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 21:27 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 21:27 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 21:27 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 21:27 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 21:27 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 18.918 seconds (JVM running for 22.943)
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 21:27 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 37 ms
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 21:28 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:28 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@771df1c9
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:28 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 21:28 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 21:28 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 21:28 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 21:28 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 21:28 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 21:28 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 21:28 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 21:28 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 21:28 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 21:28 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 21:28 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 21:28 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:28 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:28 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 21:28 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:28 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 21:28 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 21:28 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 21:28 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 21:28 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 21:28 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:28 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 21:28 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 21:28 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 21:28 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 21:28 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 21:28 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:28 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:28 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:28 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@85f99c, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:begin
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.transaction.support.DefaultTransactionStatus@5199dfc
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TransactionUtils--->目标方法名为:commit
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.TransactionAspect.logAround(TransactionAspect.java:40)ev  el crw.bishe.team.aop.TransactionAspect - 事务已提交
2020-05-27 21:28 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=null),[]>
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 23096 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 113ms. Found 0 JDBC repository interfaces.
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 62ms. Found 0 Redis repository interfaces.
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@a0081e' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$23fb18b2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 21:45 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 21:45 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 21:45 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 21:45 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 5920 ms
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 21:45:20",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@239375ca
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@74acadd7
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@11d16c6b
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@334f5190
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@4629881b
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@2c8cb47d
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@6a76e74f
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@17282d41, org.springframework.security.web.context.SecurityContextPersistenceFilter@65c7b2e1, org.springframework.security.web.header.HeaderWriterFilter@3476520a, org.springframework.security.web.authentication.logout.LogoutFilter@3b0996aa, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4fffd7e, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@26952d6a, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@5f88ab71, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6caa5a60, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6c01df80, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@140a4cc6, org.springframework.security.web.session.SessionManagementFilter@188ce2ca, org.springframework.security.web.access.ExceptionTranslationFilter@61167bf0, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1a731583]
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@5280aba4
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@35954b3f
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/2089882875@1b78f490
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@5b5940a6
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@7be626db
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@435c080d
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 21:45 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 21:45 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 21:45 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 21:45 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 21:45 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 21:45 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 21:45 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 18.042 seconds (JVM running for 22.677)
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 21:45 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 31 ms
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@2c8cb47d
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getApplyByUserId
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 21:46 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 21:46 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 21:46 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 21:46 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 21:46 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 21:46 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:46 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 21:46 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 21:46 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 21:46 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:46 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:46 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 21:46 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 21:46 [http-nio-8888-exec-3] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'arg1' not found. Available parameters are [userName, param3, userId, taskId, param1, param2]] with root cause
org.apache.ibatis.binding.BindingException: Parameter 'arg1' not found. Available parameters are [userName, param3, userId, taskId, param1, param2]
	at org.apache.ibatis.binding.MapperMethod$ParamMap.get(MapperMethod.java:212) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.reflection.wrapper.MapWrapper.get(MapWrapper.java:45) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.createCacheKey(BaseExecutor.java:219) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.createCacheKey(CachingExecutor.java:146) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:84) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy146.updateTaskByTaskId(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy147.updateTaskByTaskId(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TaskServiceImpl.updateTaskByTaskId(TaskServiceImpl.java:92) ~[classes/:?]
	at crw.bishe.team.service.TaskServiceImpl$$FastClassBySpringCGLIB$$28261c51.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TaskServiceImpl$$EnhancerBySpringCGLIB$$e63216bc.updateTaskByTaskId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TaskController.updateTaskByTaskId(TaskController.java:108) ~[classes/:?]
	at crw.bishe.team.controller.project.TaskController$$FastClassBySpringCGLIB$$5bc66ea2.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TaskController$$EnhancerBySpringCGLIB$$cb0c884f.updateTaskByTaskId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 9400 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 120ms. Found 0 JDBC repository interfaces.
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43ms. Found 0 Redis repository interfaces.
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@20078ca6' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$b30d6039] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 21:46 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 21:46 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 21:46 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 21:46 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6122 ms
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 21:46:40",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3f55de02
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@77c3ae06
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@375499b6
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@3ff981a7
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@35b940ab
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@2908e417
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@47893fcc
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5104b10a, org.springframework.security.web.context.SecurityContextPersistenceFilter@e557899, org.springframework.security.web.header.HeaderWriterFilter@653afd7e, org.springframework.security.web.authentication.logout.LogoutFilter@314f4f62, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@b95f946, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@395a6856, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@50de7a4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6a1b7bd3, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@55a15f83, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@294c6a87, org.springframework.security.web.session.SessionManagementFilter@45113eb1, org.springframework.security.web.access.ExceptionTranslationFilter@3484a377, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5561004e]
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@2f43cc12
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@218f4a24
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/1720288087@1955d9dc
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@275292ab
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@2bb99d71
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@517b7d97
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 21:46 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 21:46 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 21:46 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 21:46 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 21:46 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 21:46 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 21:46 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 17.342 seconds (JVM running for 21.514)
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 21:46 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 24 ms
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@2908e417
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 21:47 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 21:47 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 21:47 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 21:47 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 21:47 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 21:47 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 21:47 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 21:47 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 21:47 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]
2020-05-27 21:47 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@732b5639, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)])),[]>
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=62, userId=1, userName=曹荣武, teamId=102, teamName=我的毕设团队, isLeader=1), UserTeamDto(utId=86, userId=2, userName=小小明, teamId=102, teamName=我的毕设团队, isLeader=0)]),[]>
2020-05-27 21:47 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 21:47 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 21:47 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 21:47 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 21:47 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 21:47 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 21:47 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 21:47 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 21:47 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 21:47 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 21:47 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getLeaderIdByProId
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectController--->目标方法名为:getProjectByProId
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getLeaderIdByProId
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:getProjectByProId
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByProId
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getLeaderIdByProId
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)
2020-05-27 21:47 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)),[]>
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:47 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:geTaskByProId
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:geTaskByProId
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:geTaskByProId
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]
2020-05-27 21:47 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6079, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5c2ff, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=3, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c769, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e3d, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=[])]),[]>
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:47 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=null),[]>
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:updateTaskByTaskId
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:updateTaskByTaskId
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:updateTaskByTaskId
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 21:47 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=null),[]>
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 22096 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 71ms. Found 0 JDBC repository interfaces.
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36ms. Found 0 Redis repository interfaces.
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@ef24c8' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$1e026d41] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 22:29 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 22:29 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 22:29 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 22:29 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 22:29 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 5295 ms
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 22:29:56",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@43e17bad
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@17ad686b
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@54938f1
2020-05-27 22:29 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@46b6f64e
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@25c0e7f
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@6525e66a
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@3467a4e1
2020-05-27 22:30 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3c6a6d98, org.springframework.security.web.context.SecurityContextPersistenceFilter@6b7740d3, org.springframework.security.web.header.HeaderWriterFilter@25056c3e, org.springframework.security.web.authentication.logout.LogoutFilter@16917028, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3bd272f7, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@4ee7e9d7, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@5d25c2f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1ffe93dc, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@74dce186, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@784d086c, org.springframework.security.web.session.SessionManagementFilter@148c22d2, org.springframework.security.web.access.ExceptionTranslationFilter@6fead910, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5506b001]
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@45110915
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@19560c7e
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/1574853795@5e23de8e
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@3d948b97
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@234e6bba
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@625e2154
2020-05-27 22:30 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 22:30 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 22:30 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 22:30 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 22:30 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 22:30 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 22:30 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 22:30 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 22:30 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 22:30 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 22:30 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 17.027 seconds (JVM running for 20.775)
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 22:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 43 ms
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@6525e66a
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getApplyByUserId
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1d40b9e9, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[ApplyDto(applyId=22, teamId=102, teamName=我的毕设团队, userId=1, userName=faib, applyDate=2020-02-02, decribe=wag, phone=121212, status=2), ApplyDto(applyId=23, teamId=102, teamName=我的毕设团队, userId=1, userName=小小明, applyDate=2020-02-02, decribe=申请加入, phone=159****2231, status=2)]),[]>
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=8}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6e12, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5d098, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6e12, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5d098, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[TaskDto(super=crw.bishe.team.dto.TaskDto@860735, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6e12, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5d098, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试1, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c3fd, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf50730, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=[]), TaskDto(super=crw.bishe.team.dto.TaskDto@b1328788, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=[])]),[]>
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@e1e18e7b, teamId=102, teamName=我的毕设团队, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=大学生组队系统开发的目的在于，利用互联网的方便，快捷，即时的优势，让同学们能随时随地找到符合自己的团队，提高同学们的团队协作能力。通过组队系统，无论是校内组队，校外组队，或专业组队，跨专业组队，或自己的兴趣爱好组队等，能让同学们无校园边界组队，扩大学生的团队范围，这样便使得组队不受地域和时间的限制。, teamType=技术类, teamNumber=1, sumNumber=5, teamDate=2020-05-05, status=1, staff=懂得采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java、spring boot、angular, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@4ed88afc, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=业余类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 8
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 8
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 2
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 2
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [ProjectDto(super=crw.bishe.team.dto.ProjectDto@7135189a, proId=80, proName=大学生组队系统, leaderName=曹荣武, proDescribe=大学生组队系统采用前后端分离技术，通过提供RESTful API的接口做前后端数据交互。前端采用Angular框架开发，后端用Spring Boot整合 swagger2 以提供 RESTful API，druid为数据库连接池，采用 Redis作为缓存机制，以Spring AOP即面向切面编程做系统的日志管理、事务管理和缓存管理等功能，并且用Spring Security做身份认证和用户授权功能。用户在登录系统采用JWT做做身份认证, proDate=2020-05-05, proStartTime=2019-11-01, proEndTime=2020-05-10, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null), ProjectDto(super=crw.bishe.team.dto.ProjectDto@a4c3274c, proId=82, proName=我的团队, leaderName=曹荣武, proDescribe=非哇嘎, proDate=2020-05-05, proStartTime=2020-05-09, proEndTime=2020-05-09, proStatus=0, teamId=102, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:deleteByProIds
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:selectByProIds
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TaskDto(super=crw.bishe.team.dto.TaskDto@86075f, taskId=67, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-06-09, taskEndTime=2020-10-11, taskContent=系统规划11, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=无, subTaskDtos=null), TaskDto(super=crw.bishe.team.dto.TaskDto@885d6e3c, taskId=78, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-16, taskEndTime=2020-06-16, taskContent=测试, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试, subTaskDtos=null), TaskDto(super=crw.bishe.team.dto.TaskDto@68e5d0c2, taskId=79, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-09, taskContent=测试1, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试1, subTaskDtos=null), TaskDto(super=crw.bishe.team.dto.TaskDto@8ae8c427, taskId=80, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-07, taskEndTime=2020-06-09, taskContent=测试2, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=测试2, subTaskDtos=null), TaskDto(super=crw.bishe.team.dto.TaskDto@9cf5075a, taskId=81, proId=80, taskCreateTime=2020-05-05, taskStartTime=2020-05-08, taskEndTime=2020-06-16, taskContent=reces , userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=arga, subTaskDtos=null), TaskDto(super=crw.bishe.team.dto.TaskDto@b13287b2, taskId=82, proId=80, taskCreateTime=2020-05-06, taskStartTime=2020-05-09, taskEndTime=2020-06-09, taskContent=222, userId=1, userName=曹荣武, subTaskId=null, taskStatus=4, taskMark=222, subTaskDtos=null), TaskDto(super=crw.bishe.team.dto.TaskDto@4531c793, taskId=83, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-10, taskEndTime=2020-06-08, taskContent=ces, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fewag, subTaskDtos=null), TaskDto(super=crw.bishe.team.dto.TaskDto@e38a5e67, taskId=84, proId=80, taskCreateTime=2020-05-10, taskStartTime=2020-05-17, taskEndTime=2020-06-16, taskContent=12112121, userId=2, userName=小小明, subTaskId=null, taskStatus=4, taskMark=fqew, subTaskDtos=null)]
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SubTaskServiceImpl--->目标方法名为:deleteByTaskIds
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SubTaskMapper--->目标方法名为:deleteByTaskIds
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:deleteByProIds
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 8
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 8
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : FilesServiceImpl--->目标方法名为:deleteByProIds
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : FilesMapper--->目标方法名为:delectByProIds
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 6
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 6
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : NoticeServiceImpl--->目标方法名为:deleteByProIds
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : NoticeMapper--->目标方法名为:delectByProIds
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 4
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 4
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 2
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 2
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:36 [http-nio-8888-exec-1] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryMultiBulkReply(Connection.java:270) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.keys(BinaryJedis.java:397) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisKeyCommands.keys(JedisKeyCommands.java:196) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.keys(DefaultedRedisConnection.java:104) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$clean$4(DefaultRedisCacheWriter.java:182) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.clean(DefaultRedisCacheWriter.java:171) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.clear(RedisCache.java:193) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doClear(AbstractCacheInvoker.java:122) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.performCacheEvict(CacheAspectSupport.java:488) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.processCacheEvicts(CacheAspectSupport.java:476) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:433) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.delete(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.delete(TeamController.java:87) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.delete(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:931) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:666) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-2] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryMultiBulkReply(Connection.java:270) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.keys(BinaryJedis.java:397) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisKeyCommands.keys(JedisKeyCommands.java:196) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.keys(DefaultedRedisConnection.java:104) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$clean$4(DefaultRedisCacheWriter.java:182) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.clean(DefaultRedisCacheWriter.java:171) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.clear(RedisCache.java:193) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doClear(AbstractCacheInvoker.java:122) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.performCacheEvict(CacheAspectSupport.java:488) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.processCacheEvicts(CacheAspectSupport.java:476) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:433) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.ApplyServiceImpl$$EnhancerBySpringCGLIB$$de3c8ac4.deleteByTeamId(<generated>) ~[classes/:?]
	at crw.bishe.team.service.TeamServiceImpl.delete(TeamServiceImpl.java:87) ~[classes/:?]
	at crw.bishe.team.service.TeamServiceImpl$$FastClassBySpringCGLIB$$f9ca1879.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.lambda$invoke$0(CacheInterceptor.java:53) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.invokeOperation(CacheAspectSupport.java:365) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:420) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.delete(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.delete(TeamController.java:87) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.delete(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:931) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:666) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 22:36 [http-nio-8888-exec-9] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getMyTeamProByUserId(TeamController.java:134) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-10] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getJoinTeamProByUserId(TeamController.java:141) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-6] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.ApplyServiceImpl$$EnhancerBySpringCGLIB$$de3c8ac4.getEnqueueApply(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.ApplyController.getEnqueueApply(ApplyController.java:43) ~[classes/:?]
	at crw.bishe.team.controller.project.ApplyController$$FastClassBySpringCGLIB$$e996ea29.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.ApplyController$$EnhancerBySpringCGLIB$$1ef298e9.getEnqueueApply(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 22:36 [http-nio-8888-exec-7] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getMyTeamProByUserId(TeamController.java:134) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-2] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.ApplyServiceImpl$$EnhancerBySpringCGLIB$$de3c8ac4.getEnqueueApply(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.ApplyController.getEnqueueApply(ApplyController.java:43) ~[classes/:?]
	at crw.bishe.team.controller.project.ApplyController$$FastClassBySpringCGLIB$$e996ea29.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.ApplyController$$EnhancerBySpringCGLIB$$1ef298e9.getEnqueueApply(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-3] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getJoinTeamProByUserId(TeamController.java:141) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-4] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getMyTeamProByUserId(TeamController.java:134) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-8] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getJoinTeamProByUserId(TeamController.java:141) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:36 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 22:36 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:36 [http-nio-8888-exec-10] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getTeams(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getTeamList(TeamController.java:113) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getTeamList(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-9] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.DictionaryServiceImpl$$EnhancerBySpringCGLIB$$e5ef05b2.getTeamType(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.dictionary.DictionaryController.getProType(DictionaryController.java:36) ~[classes/:?]
	at crw.bishe.team.controller.dictionary.DictionaryController$$FastClassBySpringCGLIB$$cdd57cbe.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.dictionary.DictionaryController$$EnhancerBySpringCGLIB$$7fe015c8.getProType(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:36 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:36 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:36 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:36 [http-nio-8888-exec-5] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getMyTeamProByUserId(TeamController.java:134) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-1] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getJoinTeamProByUserId(TeamController.java:141) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:36 [http-nio-8888-exec-3] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.ApplyServiceImpl$$EnhancerBySpringCGLIB$$de3c8ac4.getEnqueueApply(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.ApplyController.getEnqueueApply(ApplyController.java:43) ~[classes/:?]
	at crw.bishe.team.controller.project.ApplyController$$FastClassBySpringCGLIB$$e996ea29.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.ApplyController$$EnhancerBySpringCGLIB$$1ef298e9.getEnqueueApply(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:37 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:37 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:37 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 22:37 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:37 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 22:37 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:37 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:37 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 22:37 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:37 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:37 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:37 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:37 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:37 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:37 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:37 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:37 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:37 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:37 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:37 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:37 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:37 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:37 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:37 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:37 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:37 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:37 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:37 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:37 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:37 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:37 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:37 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 22:37 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:37 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:37 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:37 [http-nio-8888-exec-2] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.DictionaryServiceImpl$$EnhancerBySpringCGLIB$$e5ef05b2.getTeamType(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.dictionary.DictionaryController.getProType(DictionaryController.java:36) ~[classes/:?]
	at crw.bishe.team.controller.dictionary.DictionaryController$$FastClassBySpringCGLIB$$cdd57cbe.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.dictionary.DictionaryController$$EnhancerBySpringCGLIB$$7fe015c8.getProType(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:37 [http-nio-8888-exec-4] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getTeams(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getTeamList(TeamController.java:113) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getTeamList(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:37 [http-nio-8888-exec-10] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getJoinTeamProByUserId(TeamController.java:141) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:37 [http-nio-8888-exec-9] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$6928371d.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getMyTeamProByUserId(TeamController.java:134) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$812914cc.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:37 [http-nio-8888-exec-7] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.ApplyServiceImpl$$EnhancerBySpringCGLIB$$de3c8ac4.getEnqueueApply(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.ApplyController.getEnqueueApply(ApplyController.java:43) ~[classes/:?]
	at crw.bishe.team.controller.project.ApplyController$$FastClassBySpringCGLIB$$e996ea29.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.ApplyController$$EnhancerBySpringCGLIB$$1ef298e9.getEnqueueApply(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 19356 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81ms. Found 0 JDBC repository interfaces.
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45ms. Found 0 Redis repository interfaces.
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@1f9d0fa8' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$fd99135a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 22:37 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 22:37 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 22:37 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 22:37 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 22:37 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 4817 ms
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 22:37:55",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@696a6f19
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@704068c8
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@64a824b7
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@4c3245f2
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@6c8a26c1
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@348c9e74
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 22:37 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@49a379df
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@825d552, org.springframework.security.web.context.SecurityContextPersistenceFilter@50e33f79, org.springframework.security.web.header.HeaderWriterFilter@e3a0440, org.springframework.security.web.authentication.logout.LogoutFilter@2c8180a4, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@192104a5, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@2719c32b, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@40d092a2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@26edbb7a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@403e9b1e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@300c0599, org.springframework.security.web.session.SessionManagementFilter@19887383, org.springframework.security.web.access.ExceptionTranslationFilter@25033dc4, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@32229657]
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@21eec3bb
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@3a69e2aa
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/1968633801@51da0f01
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@371a5e30
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@6336394d
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@514ad7d8
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 22:38 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 22:38 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 22:38 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 22:38 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 22:38 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 15.863 seconds (JVM running for 19.979)
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:38 [http-nio-8888-exec-5] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 22:38 [http-nio-8888-exec-5] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 22:38 [http-nio-8888-exec-5] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 26 ms
2020-05-27 22:38 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:38 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:38 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:38 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:38 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:38 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:38 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:38 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:38 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:38 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:38 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:38 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:38 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:38 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:38 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:38 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:38 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:38 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 22:38 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@348c9e74
2020-05-27 22:38 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:38 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:38 [http-nio-8888-exec-1] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 22:38 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:38 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:38 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:38 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:38 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:38 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 22:38 [http-nio-8888-exec-2] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$a209727d.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getMyTeamProByUserId(TeamController.java:134) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$3c477568.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:38 [http-nio-8888-exec-3] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$a209727d.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getJoinTeamProByUserId(TeamController.java:141) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$3c477568.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:38 [http-nio-8888-exec-5] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.ApplyServiceImpl$$EnhancerBySpringCGLIB$$171dc624.getEnqueueApply(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.ApplyController.getEnqueueApply(ApplyController.java:43) ~[classes/:?]
	at crw.bishe.team.controller.project.ApplyController$$FastClassBySpringCGLIB$$e996ea29.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.ApplyController$$EnhancerBySpringCGLIB$$8a7d2882.getEnqueueApply(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:38 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:38 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:38 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:38 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:38 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:38 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:38 [http-nio-8888-exec-6] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$a209727d.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getMyTeamProByUserId(TeamController.java:134) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$3c477568.getMyTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:38 [http-nio-8888-exec-7] [ERROR]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: java.net.SocketTimeoutException: Read timed out; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketTimeoutException: Read timed out] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[?:1.8.0_121]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[?:1.8.0_121]
	at java.net.SocketInputStream.read(SocketInputStream.java:127) ~[?:1.8.0_121]
	at redis.clients.jedis.util.RedisInputStream.ensureFill(RedisInputStream.java:199) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.util.RedisInputStream.readByte(RedisInputStream.java:43) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.process(Protocol.java:155) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Protocol.read(Protocol.java:220) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:318) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:255) ~[jedis-3.1.0.jar:?]
	at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:247) ~[jedis-3.1.0.jar:?]
	at org.springframework.data.redis.connection.jedis.JedisStringCommands.get(JedisStringCommands.java:65) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:260) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.lambda$get$1(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:242) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:88) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TeamServiceImpl$$EnhancerBySpringCGLIB$$a209727d.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController.getJoinTeamProByUserId(TeamController.java:141) ~[classes/:?]
	at crw.bishe.team.controller.project.TeamController$$FastClassBySpringCGLIB$$b51e4d7a.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.controller.project.TeamController$$EnhancerBySpringCGLIB$$3c477568.getJoinTeamProByUserId(<generated>) ~[classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) ~[druid-1.0.12.jar:1.0.12]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:52) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:216) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 2964 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 106ms. Found 0 JDBC repository interfaces.
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 41ms. Found 0 Redis repository interfaces.
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@517bfa70' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$468ac638] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 22:38 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 22:38 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 22:38 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 22:38 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 5659 ms
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 22:38:39",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@986b81d
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@647e19f5
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@525abbd6
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@5fcd7005
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@72184f2e
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@4260e65f
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@335946e
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@766cd23c, org.springframework.security.web.context.SecurityContextPersistenceFilter@3b95caf8, org.springframework.security.web.header.HeaderWriterFilter@51aa3b50, org.springframework.security.web.authentication.logout.LogoutFilter@39957ba7, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@e31322d, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@7e4fc046, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@349db54b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@62c5e385, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@26be2d2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4e6044a3, org.springframework.security.web.session.SessionManagementFilter@b045ad4, org.springframework.security.web.access.ExceptionTranslationFilter@51e0242b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@325c1d2e]
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@b186125
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@565940bf
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/992003189@59d64754
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@27cc5b6b
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@2528a748
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@315644ba
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 22:38 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 22:38 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 22:38 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 22:38 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 22:38 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 22:38 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 22:38 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 17.827 seconds (JVM running for 21.06)
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 22:38 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 29 ms
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@4260e65f
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryServiceImpl--->目标方法名为:getTeamType
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeams
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:selectTeamType
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeams
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@12195192, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@5bb6d066, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@e163c5dd, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9778e535, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@92ef59f1, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@995f5b2d, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@619fe471, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@b35c69b2, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2a7eaa68, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@d634f75c, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:getEnqueueApply
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:getEnqueueApply
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=7}, {x=金融类, y=1}, {x=业余类, y=3}]),[]>
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 2
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 2
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:deleteByProIds
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:selectByProIds
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:deleteByProIds
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : FilesServiceImpl--->目标方法名为:deleteByProIds
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : FilesMapper--->目标方法名为:delectByProIds
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : NoticeServiceImpl--->目标方法名为:deleteByProIds
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : NoticeMapper--->目标方法名为:delectByProIds
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:deleteByProIds
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:selectByProIds
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:deleteByProIds
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : FilesServiceImpl--->目标方法名为:deleteByProIds
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : FilesMapper--->目标方法名为:delectByProIds
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : NoticeServiceImpl--->目标方法名为:deleteByProIds
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : NoticeMapper--->目标方法名为:delectByProIds
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:getEnqueueApply
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:getEnqueueApply
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=6}, {x=金融类, y=1}, {x=业余类, y=2}]
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=6}, {x=金融类, y=1}, {x=业余类, y=2}]
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=6}, {x=金融类, y=1}, {x=业余类, y=2}]),[]>
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <400 BAD_REQUEST Bad Request,Result(status=0, desc=处理失败, data=null),[]>
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <400 BAD_REQUEST Bad Request,Result(status=0, desc=处理失败, data=null),[]>
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:getEnqueueApply
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:getEnqueueApply
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=6}, {x=金融类, y=1}, {x=业余类, y=2}]
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=6}, {x=金融类, y=1}, {x=业余类, y=2}]
2020-05-27 22:40 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=6}, {x=金融类, y=1}, {x=业余类, y=2}]),[]>
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:40 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:40 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:41 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:41 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:41 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:41 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=业余类, y=1}]
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=业余类, y=1}]
2020-05-27 22:41 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=业余类, y=1}]),[]>
2020-05-27 22:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:getEnqueueApply
2020-05-27 22:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:getEnqueueApply
2020-05-27 22:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:41 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 8856 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 127ms. Found 0 JDBC repository interfaces.
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45ms. Found 0 Redis repository interfaces.
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@26f4d015' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$b86ee765] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-27 22:41 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-27 22:41 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-27 22:41 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-27 22:41 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-27 22:41 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 5792 ms
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-27 22:41:54",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@1ca1e0da
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@6314ae5a
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@6b1dd4ea
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@643fad7b
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@5bc005b7
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@2edbc763
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-27 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@500790ba
2020-05-27 22:42 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1c1af400, org.springframework.security.web.context.SecurityContextPersistenceFilter@5f09ffa5, org.springframework.security.web.header.HeaderWriterFilter@57fe2592, org.springframework.security.web.authentication.logout.LogoutFilter@3ecbc83a, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7b75cd8f, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@717c5757, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@2bac6aaf, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@12901780, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@44502ac2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2c3476ba, org.springframework.security.web.session.SessionManagementFilter@437e6d3a, org.springframework.security.web.access.ExceptionTranslationFilter@2625d0c4, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3b5f624b]
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@7d3ac7bf
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@7c215fb7
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/286681452@71206275
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@326c3517
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@1f954333
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@2af84836
2020-05-27 22:42 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-27 22:42 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-27 22:42 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-27 22:42 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-27 22:42 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-27 22:42 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-27 22:42 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-27 22:42 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-27 22:42 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-27 22:42 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-27 22:42 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 17.368 seconds (JVM running for 21.917)
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-27 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 28 ms
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@2edbc763
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeams
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeams
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[])]
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[])]
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:42 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d6ba2624, teamId=103, teamName=阿里团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=阿里团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@f4d12701, proId=81, proName=阿里项目1, leaderName=曹荣武, proDescribe=阿里项目描述, proDate=2020-05-05, proStartTime=2020-05-08, proEndTime=2020-06-16, proStatus=0, teamId=103, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@2057a4f8, teamId=104, teamName=京东团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=京东团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[ProjectDto(super=crw.bishe.team.dto.ProjectDto@48e07ad1, proId=83, proName=测试, leaderName=曹荣武, proDescribe=测挖, proDate=2020-05-10, proStartTime=2020-05-17, proEndTime=2020-06-16, proStatus=0, teamId=104, proType=技术类, proCurrentNum=null, proLimiedNum=null, seeNum=0, staff=null, staffList=null, taskDtos=null)]), TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@a6049a6f, teamId=106, teamName=百度团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=百度团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5c19b9c7, teamId=107, teamName=广金团队1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=广东金融学院, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@57902e83, teamId=108, teamName=广金团队2, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@5e002fbf, teamId=109, teamName=广金团队3, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=广金团队描述信息, teamType=技术类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=个人团队, teamScope=校外, teamLabel=Java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@2640b903, teamId=120, teamName=团队1221, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=xxx, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-05, status=1, staff=xxx, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java , seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@77fd3e44, teamId=121, teamName=团队管理, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=团队管理中, teamType=技术类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@ef1f7efa, teamId=122, teamName=团队测试1, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=测试1, teamType=金融类, teamNumber=1, sumNumber=3, teamDate=2020-05-10, status=1, staff=测试1, teamNature=班级团队, teamScope=校外, teamLabel=springboot, seeNum=0, university=null, projects=[]), TeamDto(super=crw.bishe.team.dto.TeamDto@9ad5cbee, teamId=123, teamName=测试, adminId=4, leaderId=1, leaderName=曹荣武, teamDescribe=ces, teamType=技术类, teamNumber=1, sumNumber=2, teamDate=2020-05-12, status=1, staff=ces, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=业余类, y=1}]
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=业余类, y=1}]
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=业余类, y=1}]),[]>
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@37fb6692, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:getEnqueueApply
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=业余类, y=1}]
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=业余类, y=1}]
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=业余类, y=1}]),[]>
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[])]
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[])]
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:getEnqueueApply
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@fc9c3b24, teamId=105, teamName=酷狗团队, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=酷狗团队描述信息, teamType=业余类, teamNumber=1, sumNumber=50, teamDate=2020-05-05, status=1, staff=需要人员类型详细描述, teamNature=企业团队, teamScope=广东金融学院, teamLabel=springboot, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:42 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:42 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:getEnqueueApply
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:getEnqueueApply
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryServiceImpl--->目标方法名为:getTeamType
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:selectTeamType
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:42 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeams
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeams
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:42 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:saveTeam
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:saveTeam
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : AdminMapper--->目标方法名为:findAdminId
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMappingImpl--->目标方法名为:toEntity
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : Team(teamId=null, teamName=ces, adminId=0, leaderId=1, LeaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamScope=广东金融学院, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=0, staff=gag, teamNature=个人团队, teamLabel=java, seeNum=0, projects=null)
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:saveTeam
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : InsertMapper--->目标方法名为:insert
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:agree
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=保存成功, data=1),[]>
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=1}]
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=1}]
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=1}]),[]>
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@d933ca2d, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@d933ca2d, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d933ca2d, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:isLeader
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:isLeader
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@1492f59b, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=true),[]>
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:existInTeam
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamProByTeamId
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeamProByTeamId
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeamProByTeamId
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:existInTeam
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamController--->目标方法名为:getUserByTeamId
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:getUserByTeamId
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:existInTeam
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoController--->目标方法名为:getLeaderByTeamId
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:getUserByTeamId
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@1492f59b, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=90, userId=1, userName=曹荣武, teamId=124, teamName=ces, isLeader=1)]
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoServiceImpl--->目标方法名为:getLeaderByTeamId
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : TeamDto(super=crw.bishe.team.dto.TeamDto@1492f59b, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=1),[]>
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [UserTeamDto(utId=90, userId=1, userName=曹荣武, teamId=124, teamName=ces, isLeader=1)]
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[UserTeamDto(utId=90, userId=1, userName=曹荣武, teamId=124, teamName=ces, isLeader=1)]),[]>
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=TeamDto(super=crw.bishe.team.dto.TeamDto@1492f59b, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])),[]>
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserInfoMapper--->目标方法名为:getLeaderByTeamId
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d933ca2d, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=UserDto(super=crw.bishe.team.dto.UserDto@3029ffba, userId=1, userName=曹荣武, userAvatar=https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png, gender=0, university=广东金融学院, college=互联网, profession=计科, grade=1, userClass=1, userNo=123456, userTel=123456789, email=22233, ability=no)),[]>
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DictionaryController--->目标方法名为:getProType
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getTeamList
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.DictionaryServiceImplgetTeamType
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamTypeDto(key=0, value=技术类), TeamTypeDto(key=1, value=业余类), TeamTypeDto(key=2, value=金融类), TeamTypeDto(key=3, value=兴趣类), TeamTypeDto(key=4, value=社团类), TeamTypeDto(key=5, value=其他)]),[]>
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : --->目标方法名为:generate
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.service.TeamServiceImplgetTeams
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getTeams
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getTeams
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@1492f59b, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [TeamDto(super=crw.bishe.team.dto.TeamDto@1492f59b, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@1492f59b, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=广东金融学院, projects=[])]),[]>
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:43 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d933ca2d, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:43 [http-nio-8888-exec-1] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=1}]
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : [{x=技术类, y=1}]
2020-05-27 22:43 [http-nio-8888-exec-3] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[{x=技术类, y=1}]),[]>
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-2] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[TeamDto(super=crw.bishe.team.dto.TeamDto@d933ca2d, teamId=124, teamName=ces, adminId=0, leaderId=1, leaderName=曹荣武, teamDescribe=faga, teamType=技术类, teamNumber=1, sumNumber=1, teamDate=2020-05-27, status=1, staff=gag, teamNature=个人团队, teamScope=广东金融学院, teamLabel=java, seeNum=0, university=null, projects=[])]),[]>
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-4] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:delete
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:delete
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamServiceImpl--->目标方法名为:deleteByTeamId
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserTeamMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectServiceImpl--->目标方法名为:delectByTeamId
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:getProjectByTeamId
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ProjectMapper--->目标方法名为:deleteByTeamId
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 0
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DeleteByPrimaryKeyMapper--->目标方法名为:deleteByPrimaryKey
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : 1
2020-05-27 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=处理成功, data=null),[]>
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskController--->目标方法名为:getTaskByUserId
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskServiceImpl--->目标方法名为:getTaskByUserId
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TaskMapper--->目标方法名为:getTaskByUserId
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getMyTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=根据用户ID获取任务信息, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamController--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenInterceptor--->目标方法名为:preHandle
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamServiceImpl--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : true
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyController--->目标方法名为:getEnqueueApply
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeController--->目标方法名为:getTeamTypeNumber
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamMapper--->目标方法名为:getJoinTeamProByUserId
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeServiceImpl--->目标方法名为:getTeamTypeNumber
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyServiceImpl--->目标方法名为:getEnqueueApply
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : ApplyMapper--->目标方法名为:getEnqueueApply
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TeamTypeMapper--->目标方法名为:getTeamTypeNumber
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-10] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-8] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : []
2020-05-27 22:43 [http-nio-8888-exec-9] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-27 22:43 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : <200 OK OK,Result(status=200, desc=OK, data=[]),[]>
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 21016 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95ms. Found 0 JDBC repository interfaces.
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40ms. Found 0 Redis repository interfaces.
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@a0081e' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$77f64cbd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-30 21:30 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-30 21:30 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-30 21:30 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-30 21:30 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 4560 ms
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-30 21:30:20",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@7bdd70a6
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@462c5347
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@109bd63d
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@6d2ff035
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@3debd4a9
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@6bb67441
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@7b0f0f4b
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5c9b429, org.springframework.security.web.context.SecurityContextPersistenceFilter@188ce2ca, org.springframework.security.web.header.HeaderWriterFilter@61167bf0, org.springframework.security.web.authentication.logout.LogoutFilter@343c509b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1a731583, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@6c01df80, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@7ea6bde3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6813f872, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4d98030a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@69e8bc1f, org.springframework.security.web.session.SessionManagementFilter@78c1c916, org.springframework.security.web.access.ExceptionTranslationFilter@46b85924, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@739837f6]
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@2267ad51
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@4f1d3454
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/1443242264@138c48de
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@5eb4fa26
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@4637fb92
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@4b5e6b89
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-30 21:30 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-30 21:30 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-30 21:30 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-30 21:30 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-30 21:30 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-30 21:30 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-30 21:30 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 14.989 seconds (JVM running for 19.827)
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-30 21:30 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:31 [http-nio-8888-exec-1] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-30 21:31 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-30 21:31 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 26 ms
2020-05-30 21:31 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenServiceImpl--->目标方法名为:loadUserByUsername
2020-05-30 21:31 [http-nio-8888-exec-7] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserRolesMapper--->目标方法名为:findByUserName
2020-05-30 21:31 [http-nio-8888-exec-7] [WARN]  com.alibaba.druid.pool.vendor.MySqlValidConnectionChecker.<init>(MySqlValidConnectionChecker.java:53)ev  el com.alibaba.druid.pool.vendor.MySqlValidConnectionChecker - Cannot resolve com.mysq.jdbc.Connection.ping method.  Will use 'SELECT 1' instead.
java.lang.NullPointerException: null
	at com.alibaba.druid.pool.vendor.MySqlValidConnectionChecker.<init>(MySqlValidConnectionChecker.java:48) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.initValidConnectionChecker(DruidDataSource.java:892) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:608) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) [druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) [pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) [?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) [mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) [?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) [?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) [?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) [classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) [classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$4babbaba.loadUserByUsername(<generated>) [classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-30 21:31 [http-nio-8888-exec-7] [ERROR]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:643)ev  el com.alibaba.druid.pool.DruidDataSource - init datasource error, url: jdbc:mysql://127.0.0.1:3306/team?characterEncoding=utf-8&useSSL=false
java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) [druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) [pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) [?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) [mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) [?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) [?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) [?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) [classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) [classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$4babbaba.loadUserByUsername(<generated>) [classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
Caused by: com.mysql.cj.exceptions.UnableToConnectException: CLIENT_PLUGIN_AUTH is required
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_121]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_121]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.connect(NativeAuthenticationProvider.java:205) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeProtocol.connect(NativeProtocol.java:1449) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:165) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:955) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:825) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	... 128 more
2020-05-30 21:31 [http-nio-8888-exec-7] [ERROR]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:660)ev  el com.alibaba.druid.pool.DruidDataSource - dataSource init error
java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) [druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) [pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) [?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) [mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) [?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) [?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) [?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) [classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) [classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$4babbaba.loadUserByUsername(<generated>) [classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
Caused by: com.mysql.cj.exceptions.UnableToConnectException: CLIENT_PLUGIN_AUTH is required
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_121]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_121]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.connect(NativeAuthenticationProvider.java:205) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeProtocol.connect(NativeProtocol.java:1449) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:165) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:955) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:825) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	... 128 more
2020-05-30 21:31 [http-nio-8888-exec-7] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-30 21:31 [http-nio-8888-exec-7] [ERROR]  org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)ev  el org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter - An internal error occurred while trying to authenticate the user.
org.springframework.security.authentication.InternalAuthenticationServiceException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:123) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
Caused by: org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$4babbaba.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$4babbaba.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:82) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$4babbaba.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) ~[druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$4babbaba.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: com.mysql.cj.exceptions.UnableToConnectException: CLIENT_PLUGIN_AUTH is required
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_121]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_121]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.connect(NativeAuthenticationProvider.java:205) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeProtocol.connect(NativeProtocol.java:1449) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:165) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:955) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:825) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) ~[druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$4babbaba.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 22876 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 61ms. Found 0 JDBC repository interfaces.
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 41ms. Found 0 Redis repository interfaces.
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@7615850f' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$75b7b42b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-30 21:32 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-30 21:32 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-30 21:32 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-30 21:32 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 4985 ms
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-30 21:32:09",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@7a69d91f
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@2d03671
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@e9bc51d
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@63cd4af7
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@7807c2cc
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@7208e83
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@69af73dc
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2f996587, org.springframework.security.web.context.SecurityContextPersistenceFilter@36924cd0, org.springframework.security.web.header.HeaderWriterFilter@595cc8fa, org.springframework.security.web.authentication.logout.LogoutFilter@33893a30, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1aa1df45, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@a26a96c, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@5a3be887, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2d01d891, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1b3daa4b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@465ed100, org.springframework.security.web.session.SessionManagementFilter@43ceed98, org.springframework.security.web.access.ExceptionTranslationFilter@4d47cbb7, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@50e5447e]
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@32ee24af
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@7cb8168a
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/613442840@7b167123
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@4bf335f4
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@dd7a549
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@19325a41
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-30 21:32 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-30 21:32 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-30 21:32 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-30 21:32 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-30 21:32 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-30 21:32 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-30 21:32 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 15.794 seconds (JVM running for 18.759)
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-30 21:32 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:32 [http-nio-8888-exec-1] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-30 21:32 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-30 21:32 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 36 ms
2020-05-30 21:32 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenServiceImpl--->目标方法名为:loadUserByUsername
2020-05-30 21:32 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserRolesMapper--->目标方法名为:findByUserName
2020-05-30 21:32 [http-nio-8888-exec-5] [ERROR]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:643)ev  el com.alibaba.druid.pool.DruidDataSource - init datasource error, url: jdbc:mysql://127.0.0.1:3306/team?characterEncoding=utf-8&useSSL=false
java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) [druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) [pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) [?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) [mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) [?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) [?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) [?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) [classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) [classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$f6322ffa.loadUserByUsername(<generated>) [classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
Caused by: com.mysql.cj.exceptions.UnableToConnectException: CLIENT_PLUGIN_AUTH is required
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_121]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_121]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.connect(NativeAuthenticationProvider.java:205) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeProtocol.connect(NativeProtocol.java:1449) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:165) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:955) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:825) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	... 128 more
2020-05-30 21:32 [http-nio-8888-exec-5] [ERROR]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:660)ev  el com.alibaba.druid.pool.DruidDataSource - dataSource init error
java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) [druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) [pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) [?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) [mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) [?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) [?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) [?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) [classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) [classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$f6322ffa.loadUserByUsername(<generated>) [classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
Caused by: com.mysql.cj.exceptions.UnableToConnectException: CLIENT_PLUGIN_AUTH is required
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_121]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_121]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.connect(NativeAuthenticationProvider.java:205) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeProtocol.connect(NativeProtocol.java:1449) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:165) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:955) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:825) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	... 128 more
2020-05-30 21:32 [http-nio-8888-exec-5] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-30 21:32 [http-nio-8888-exec-5] [ERROR]  org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)ev  el org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter - An internal error occurred while trying to authenticate the user.
org.springframework.security.authentication.InternalAuthenticationServiceException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:123) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
Caused by: org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$f6322ffa.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$f6322ffa.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:82) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$f6322ffa.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: java.sql.SQLNonTransientConnectionException: CLIENT_PLUGIN_AUTH is required
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) ~[druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$f6322ffa.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: com.mysql.cj.exceptions.UnableToConnectException: CLIENT_PLUGIN_AUTH is required
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_121]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_121]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.connect(NativeAuthenticationProvider.java:205) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.protocol.a.NativeProtocol.connect(NativeProtocol.java:1449) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:165) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:955) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:825) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199) ~[mysql-connector-java-8.0.15.jar:8.0.15]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) ~[druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$f6322ffa.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 9532 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96ms. Found 0 JDBC repository interfaces.
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45ms. Found 0 Redis repository interfaces.
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@1f8ba00e' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$17af37b9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-30 21:39 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-30 21:39 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-30 21:39 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-30 21:39 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 5415 ms
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-30 21:39:43",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@4e0acf86
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@65b5ef25
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@227cc2f3
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@1d2c6b5a
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@611f9e2a
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@7b2aed84
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@228ec7b0
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@71a20a8f, org.springframework.security.web.context.SecurityContextPersistenceFilter@122f27c8, org.springframework.security.web.header.HeaderWriterFilter@7b7d0f64, org.springframework.security.web.authentication.logout.LogoutFilter@34fcd2f3, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@9dd7d9b, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@4a72db5f, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@7e1a9947, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5964669, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@a1aee4b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@f09de2a, org.springframework.security.web.session.SessionManagementFilter@4d3d3387, org.springframework.security.web.access.ExceptionTranslationFilter@326f8294, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4a48b594]
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@6bbc14e4
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@617d2b
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/522370026@391b249c
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@3f4ec4e
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@4d40f8a6
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@58e30185
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-30 21:39 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-30 21:39 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-30 21:39 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-30 21:39 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-30 21:39 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-30 21:39 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-30 21:39 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 15.248 seconds (JVM running for 18.652)
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-30 21:39 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:40 [http-nio-8888-exec-1] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-30 21:40 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-30 21:40 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 33 ms
2020-05-30 21:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenServiceImpl--->目标方法名为:loadUserByUsername
2020-05-30 21:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserRolesMapper--->目标方法名为:findByUserName
2020-05-30 21:40 [http-nio-8888-exec-6] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-30 21:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.entity.UserRoles@4f854de6
2020-05-30 21:40 [http-nio-8888-exec-6] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.core.userdetails.User@586034f: Username: admin; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ADMIN
2020-05-30 21:55 [Thread-32] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-30 21:55 [Thread-32] [INFO]  com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1385)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} closed
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 9532 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53ms. Found 0 JDBC repository interfaces.
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21ms. Found 0 Redis repository interfaces.
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4c600541' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$17af37b9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [WARN]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.tomcat.util.modeler.Registry - The MBean registry cannot be disabled because it has already been initialised
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-30 21:55 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-30 21:55 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-30 21:55 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-30 21:55 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2008 ms
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-30 21:55:25",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@78ac4d6b
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@47ec92e
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@44164102
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@541d7134
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@4c444a07
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@432da49e
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@1b3f91be
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5aca7388, org.springframework.security.web.context.SecurityContextPersistenceFilter@5c20f3fc, org.springframework.security.web.header.HeaderWriterFilter@2ffdf766, org.springframework.security.web.authentication.logout.LogoutFilter@26672a40, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@173c739d, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@5e4086b7, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@6e379baf, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6378030f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@237e9ec1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@30fb54fe, org.springframework.security.web.session.SessionManagementFilter@163d7fd6, org.springframework.security.web.access.ExceptionTranslationFilter@3dc054fb, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5950e847]
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@44af79e7
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@4d7014c9
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$749/129651520@588c66c0
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@3628c8a5
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@315e5973
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@242ca69f
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-30 21:55 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-30 21:55 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-30 21:55 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-30 21:55 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-30 21:55 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 7.395 seconds (JVM running for 956.53)
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener.onApplicationEvent(ConditionEvaluationDeltaLoggingListener.java:63)ev  el org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2020-05-30 21:55 [Thread-46] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 9532 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65ms. Found 0 JDBC repository interfaces.
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25ms. Found 0 Redis repository interfaces.
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@311c584' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$17af37b9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 21:55 [restartedMain] [WARN]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.tomcat.util.modeler.Registry - The MBean registry cannot be disabled because it has already been initialised
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-30 21:55 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-30 21:55 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-30 21:55 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-30 21:55 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2158 ms
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-30 21:55:37",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@db64047
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@775b9bf8
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@30bf1446
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@75cf28fd
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@2a7afe88
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@4f0593a1
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@327abe01
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2b0777ea, org.springframework.security.web.context.SecurityContextPersistenceFilter@33ff0e6a, org.springframework.security.web.header.HeaderWriterFilter@4c65e87b, org.springframework.security.web.authentication.logout.LogoutFilter@27d0ac2e, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@ba31191, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@5b05fff9, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@385c8154, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@574c0d36, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@34890194, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@61ad0db1, org.springframework.security.web.session.SessionManagementFilter@2a78a367, org.springframework.security.web.access.ExceptionTranslationFilter@4284da71, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4bf25b5d]
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@7291b78c
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@62392613
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$751/1670008287@47f4ceda
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@5bb44b6b
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@45bec8fe
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@7d0338bf
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-30 21:55 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-30 21:55 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-30 21:55 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-30 21:55 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-30 21:55 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-30 21:55 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 6.483 seconds (JVM running for 967.744)
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-30 21:55 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 21:55 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener.onApplicationEvent(ConditionEvaluationDeltaLoggingListener.java:63)ev  el org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 3020 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 110ms. Found 0 JDBC repository interfaces.
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 57ms. Found 0 Redis repository interfaces.
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6ad19dc' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$92bd4dc3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-30 22:41 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-30 22:41 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-30 22:41 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-30 22:41 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-30 22:41 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6680 ms
2020-05-30 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-30 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-30 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-30 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-30 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-30 22:41 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-30 22:41:59",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@1f228430
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@12907b7
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@7fbb1288
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@1340fee9
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@76da002a
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@5ed217b6
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@1207e4c1
2020-05-30 22:42 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6e56e1d2, org.springframework.security.web.context.SecurityContextPersistenceFilter@688917e8, org.springframework.security.web.header.HeaderWriterFilter@200be9cb, org.springframework.security.web.authentication.logout.LogoutFilter@49434715, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3637ab6a, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@7daaa0c3, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@294b0515, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5346ba87, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@304624c9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@59633f5c, org.springframework.security.web.session.SessionManagementFilter@48fb7e01, org.springframework.security.web.access.ExceptionTranslationFilter@f92500, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4a813e7c]
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@68221566
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@2af222b5
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$595/272746641@1eca67ed
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@33b75788
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@5c0858c0
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@609b867f
2020-05-30 22:42 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-30 22:42 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-30 22:42 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-30 22:42 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-30 22:42 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-30 22:42 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-30 22:42 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-30 22:42 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-30 22:42 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-30 22:42 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-30 22:42 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 17.907 seconds (JVM running for 22.265)
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-30 22:42 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 22:42 [http-nio-8888-exec-1] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-30 22:42 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-30 22:42 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 34 ms
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 12364 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 179ms. Found 0 JDBC repository interfaces.
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 47ms. Found 0 Redis repository interfaces.
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@c25664' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$6f778774] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-30 22:43 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-30 22:43 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-30 22:43 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-30 22:43 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6681 ms
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-30 22:43:12",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@6b4a04a0
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@65147f75
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@79eafdf9
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@771dc127
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@5ceac8a3
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@116777df
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@34b17a12
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@37b27255, org.springframework.security.web.context.SecurityContextPersistenceFilter@2b7e1573, org.springframework.security.web.header.HeaderWriterFilter@2017cb60, org.springframework.security.web.authentication.logout.LogoutFilter@39fe9c84, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@782b466c, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@5dd6989b, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@55f3661a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1143f3e7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@53468135, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4430ceb3, org.springframework.security.web.session.SessionManagementFilter@fbf1e5d, org.springframework.security.web.access.ExceptionTranslationFilter@5a536e57, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1e7aea29]
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@36d02bad
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@1574d548
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/784921392@73e7ca2c
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@12ef5249
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@402b5c6f
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@7de841a4
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-30 22:43 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-30 22:43 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-30 22:43 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-30 22:43 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-30 22:43 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-30 22:43 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-30 22:43 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 18.216 seconds (JVM running for 21.411)
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-30 22:43 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 22:43 [http-nio-8888-exec-1] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-30 22:43 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-30 22:43 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 27 ms
2020-05-30 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenServiceImpl--->目标方法名为:loadUserByUsername
2020-05-30 22:43 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserRolesMapper--->目标方法名为:findByUserName
2020-05-30 22:43 [http-nio-8888-exec-5] [ERROR]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:643)ev  el com.alibaba.druid.pool.DruidDataSource - init datasource error, url: jdbc:mysql://127.0.0.1:3306/team?characterEncoding=utf-8&useSSL=false
java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:76) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:836) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) [druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) [pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) [?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) [mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) [?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) [?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) [?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) [classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) [classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$fe403bb6.loadUserByUsername(<generated>) [classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
Caused by: com.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_121]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_121]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.util.TimeUtil.getCanonicalTimezone(TimeUtil.java:132) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.protocol.a.NativeProtocol.configureTimezone(NativeProtocol.java:2120) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.protocol.a.NativeProtocol.initServerSession(NativeProtocol.java:2143) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.initializePropsFromServer(ConnectionImpl.java:1310) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:967) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:826) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	... 128 more
2020-05-30 22:43 [http-nio-8888-exec-5] [ERROR]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:660)ev  el com.alibaba.druid.pool.DruidDataSource - dataSource init error
java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:76) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:836) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) [druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) [pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) [?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) [mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) [?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) [?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) [?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) [classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) [classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$fe403bb6.loadUserByUsername(<generated>) [classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
Caused by: com.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_121]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_121]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.util.TimeUtil.getCanonicalTimezone(TimeUtil.java:132) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.protocol.a.NativeProtocol.configureTimezone(NativeProtocol.java:2120) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.protocol.a.NativeProtocol.initServerSession(NativeProtocol.java:2143) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.initializePropsFromServer(ConnectionImpl.java:1310) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:967) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:826) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	... 128 more
2020-05-30 22:43 [http-nio-8888-exec-5] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-30 22:43 [http-nio-8888-exec-5] [ERROR]  org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)ev  el org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter - An internal error occurred while trying to authenticate the user.
org.springframework.security.authentication.InternalAuthenticationServiceException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:123) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
Caused by: org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$fe403bb6.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$fe403bb6.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:82) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$fe403bb6.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: java.sql.SQLException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:76) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:836) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) ~[druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$fe403bb6.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: com.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value '�й���׼ʱ��' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_121]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_121]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.util.TimeUtil.getCanonicalTimezone(TimeUtil.java:132) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.protocol.a.NativeProtocol.configureTimezone(NativeProtocol.java:2120) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.protocol.a.NativeProtocol.initServerSession(NativeProtocol.java:2143) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.initializePropsFromServer(ConnectionImpl.java:1310) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:967) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:826) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) ~[druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$fe403bb6.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)ev  el crw.bishe.team.TeamApplication - Starting TeamApplication on LAPTOP-QUUHKKKK with PID 16832 (started by crw in D:\project\毕业设计项目\team-01)
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:651)ev  el crw.bishe.team.TeamApplication - No active profile set, falling back to default profiles: default
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-core\2.3.0.1\jaxb-core-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-api.jar
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.restart.ChangeableUrls - The Class-Path manifest attribute in C:\Users\crw\.m2\repository\com\sun\xml\bind\jaxb-impl\2.3.0.1\jaxb-impl-2.3.0.1.jar referenced one or more files that do not exist: file:/C:/Users/crw/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-core.jar
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.logging.DeferredLog.logTo(DeferredLog.java:225)ev  el org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 97ms. Found 0 JDBC repository interfaces.
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected(RepositoryConfigurationDelegate.java:249)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:127)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.data.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn(RepositoryConfigurationDelegate.java:187)ev  el org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65ms. Found 0 Redis repository interfaces.
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@23a69f9d' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)ev  el org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisCacheConfig' of type [crw.bishe.team.config.RedisCacheConfig$$EnhancerBySpringCGLIB$$fbadaa8a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8888 (http)
2020-05-30 22:44 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8888"]
2020-05-30 22:44 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardService - Starting service [Tomcat]
2020-05-30 22:44 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-05-30 22:44 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)ev  el org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6115 ms
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:druidServlet
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : statViewServlet urls=[/druid/*]
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:filterRegistrationBean
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : filterRegistrationBean urls=[/*] order=2147483647
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : DruidConfig--->目标方法名为:dataSource
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : {
	CreateTime:"2020-05-30 22:44:41",
	ActiveCount:0,
	PoolingCount:0,
	CreateCount:0,
	DestroyCount:0,
	CloseCount:0,
	ConnectCount:0,
	Connections:[
	]
}

[
]
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:passwordEncoder
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@159aa0c
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationProvider
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.authentication.dao.DaoAuthenticationProvider@59acb472
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:authenticationManagerBean
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter$AuthenticationManagerDelegator@365105e3
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_InitializingBean.afterPropertiesSet(MyInitConfig_InitializingBean.java:18)ev  el crw.bishe.team.init.MyInitConfig_InitializingBean - 实现InitializingBean接口实现项目初始化操作
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : WebConfig--->目标方法名为:addInterceptors
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisPoolConfig
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisPoolConfig(RedisConfig.java:48)ev  el crw.bishe.team.config.RedisConfig - 初始化JedisPoolConfig
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : JedisPoolConfig [lifo=true, fairness=false, maxWaitMillis=-1, minEvictableIdleTimeMillis=60000, softMinEvictableIdleTimeMillis=-1, numTestsPerEvictionRun=-1, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=true, timeBetweenEvictionRunsMillis=30000, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:jedisConnectionFactory
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.jedisConnectionFactory(RedisConfig.java:67)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisConnectionFactory
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.connection.jedis.JedisConnectionFactory@29164107
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:cacheManager
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.cache.RedisCacheManager@7792b04e
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisCacheConfig--->目标方法名为:keyGenerator
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.RedisCacheConfig$1@7a62ad49
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : RedisConfig--->目标方法名为:functionDomainRedisTemplate
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.config.RedisConfig.functionDomainRedisTemplate(RedisConfig.java:81)ev  el crw.bishe.team.config.RedisConfig - 初始化RedisTemplate
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.data.redis.core.RedisTemplate@13e661b3
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.security.web.DefaultSecurityFilterChain.<init>(DefaultSecurityFilterChain.java:43)ev  el org.springframework.security.web.DefaultSecurityFilterChain - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@52666e83, org.springframework.security.web.context.SecurityContextPersistenceFilter@7d3d75c6, org.springframework.security.web.header.HeaderWriterFilter@58f547d5, org.springframework.security.web.authentication.logout.LogoutFilter@66f72edd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@378c2b25, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@293687f3, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@66d53c38, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@73c84eb0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@66e7314f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1a78bcbe, org.springframework.security.web.session.SessionManagementFilter@e95d21c, org.springframework.security.web.access.ExceptionTranslationFilter@204fa1a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@53335d57]
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:tokenBasedRememberMeServices
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices@5017d0a1
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:loginSuccessHandler
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$1@779bb6a7
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SecurityConfig--->目标方法名为:logoutSuccessHandler
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : crw.bishe.team.config.SecurityConfig$$Lambda$596/355300377@4915a712
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods(PropertySourcedRequestMappingHandlerMapping.java:69)ev  el springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping - Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:TestApi
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@7c1738e8
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:DictionaryApi
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@3ca3dfe0
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : SwaggerConfig--->目标方法名为:createRestApi
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : springfox.documentation.spring.web.plugins.Docket@4869fa8c
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)ev  el org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer.startServer(OptionalLiveReloadServer.java:58)ev  el org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.<init>(WelcomePageHandlerMapping.java:54)ev  el org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2020-05-30 22:44 [restartedMain] [WARN]  org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration.checkTemplateLocationExists(ThymeleafAutoConfiguration.java:106)ev  el org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration - Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-30 22:44 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-05-30 22:44 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-05-30 22:44 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeStaticCache(MapperCacheDisabler.java:60)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-05-30 22:44 [restartedMain] [INFO]  tk.mybatis.mapper.autoconfigure.MapperCacheDisabler.removeEntityHelperCache(MapperCacheDisabler.java:83)ev  el tk.mybatis.mapper.autoconfigure.MapperCacheDisabler - Clear EntityHelper entityTableMap cache.
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:147)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Context refreshed
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:150)ev  el springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper - Found 3 custom documentation plugin(s)
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_2
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_3
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_2
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_2
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_2
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: createUsingPOST_4
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: deleteUsingDELETE_3
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: findAllUsingGET_3
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: updateUsingPUT_3
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: saveUsingPOST_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getProTypeUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getUniversityUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.scanners.ApiListingReferenceScanner.scan(ApiListingReferenceScanner.java:41)ev  el springfox.documentation.spring.web.scanners.ApiListingReferenceScanner - Scanning for api listing references
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: LoginUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needAdminUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needLoginUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: needUserUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getRecommandUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamsUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: delectTestUsingDELETE_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: failUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: infoUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: loginUsingPOST_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: logoutUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: projectPagesUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator.startingWith(CachingOperationNameGenerator.java:40)ev  el springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator - Generating unique operation named: getTeamTypeNumUsingGET_1
2020-05-30 22:44 [restartedMain] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8888"]
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)ev  el org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8888 (http) with context path ''
2020-05-30 22:44 [restartedMain] [INFO]  org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)ev  el crw.bishe.team.TeamApplication - Started TeamApplication in 17.861 seconds (JVM running for 21.59)
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_CommandLineRunner--->目标方法名为:run
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_CommandLineRunner.run(MyInitConfig_CommandLineRunner.java:20)ev  el crw.bishe.team.init.MyInitConfig_CommandLineRunner - 实现CommandLineRunner接口，进行项目初始化操作
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : MyInitConfig_ApplicationRunner--->目标方法名为:run
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.init.MyInitConfig_ApplicationRunner.run(MyInitConfig_ApplicationRunner.java:19)ev  el crw.bishe.team.init.MyInitConfig_ApplicationRunner - 实现ApplicationRunner接口，在项目启动完成之前初始化操作
2020-05-30 22:44 [restartedMain] [INFO]  crw.bishe.team.aop.WebLogAspect.doAfterReturning(WebLogAspect.java:34)ev  el crw.bishe.team.aop.WebLogAspect - 返回值 : null
2020-05-30 22:45 [http-nio-8888-exec-1] [INFO]  org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)ev  el org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-30 22:45 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)ev  el org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2020-05-30 22:45 [http-nio-8888-exec-1] [INFO]  org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)ev  el org.springframework.web.servlet.DispatcherServlet - Completed initialization in 31 ms
2020-05-30 22:45 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : TokenServiceImpl--->目标方法名为:loadUserByUsername
2020-05-30 22:45 [http-nio-8888-exec-5] [INFO]  crw.bishe.team.aop.WebLogAspect.doBefore(WebLogAspect.java:28)ev  el crw.bishe.team.aop.WebLogAspect - 调用方法 : UserRolesMapper--->目标方法名为:findByUserName
2020-05-30 22:45 [http-nio-8888-exec-5] [ERROR]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:643)ev  el com.alibaba.druid.pool.DruidDataSource - init datasource error, url: jdbc:mysql://localhost:3306/dbname?characterEncoding=utf-8&useSSL=true&serverTimezone=GMT
java.sql.SQLSyntaxErrorException: Unknown database 'dbname'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:836) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) [druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) [pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) [?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) [mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) [?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) [?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) [?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) [classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) [classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$418d6379.loadUserByUsername(<generated>) [classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-30 22:45 [http-nio-8888-exec-5] [ERROR]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:660)ev  el com.alibaba.druid.pool.DruidDataSource - dataSource init error
java.sql.SQLSyntaxErrorException: Unknown database 'dbname'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:836) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) [druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) [druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) [spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) [pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) [?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) [mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) [?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) [mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) [mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) [mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) [?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) [?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) [classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) [classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$418d6379.loadUserByUsername(<generated>) [classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) [spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
2020-05-30 22:45 [http-nio-8888-exec-5] [INFO]  com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:669)ev  el com.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited
2020-05-30 22:45 [http-nio-8888-exec-5] [ERROR]  org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)ev  el org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter - An internal error occurred while trying to authenticate the user.
org.springframework.security.authentication.InternalAuthenticationServiceException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLSyntaxErrorException: Unknown database 'dbname'
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLSyntaxErrorException: Unknown database 'dbname'
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:123) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95) ~[spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.29.jar:9.0.29]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
Caused by: org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLSyntaxErrorException: Unknown database 'dbname'
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLSyntaxErrorException: Unknown database 'dbname'
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$418d6379.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLSyntaxErrorException: Unknown database 'dbname'
### The error may exist in crw/bishe/team/mapper/UserRolesMapper.java (best guess)
### The error may involve crw.bishe.team.mapper.UserRolesMapper.findByUserName
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLSyntaxErrorException: Unknown database 'dbname'
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$418d6379.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLSyntaxErrorException: Unknown database 'dbname'
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:82) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$418d6379.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
Caused by: java.sql.SQLSyntaxErrorException: Unknown database 'dbname'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:836) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.20.jar:8.0.20]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:38) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1377) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1431) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:632) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:934) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:930) ~[druid-1.0.12.jar:1.0.12]
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:102) ~[druid-1.0.12.jar:1.0.12]
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:158) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:116) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:79) ~[spring-jdbc-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) ~[mybatis-3.5.3.jar:3.5.3]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143) ~[pagehelper-5.1.4.jar:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy232.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) ~[mybatis-3.5.3.jar:3.5.3]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at com.sun.proxy.$Proxy123.selectOne(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) ~[mybatis-spring-2.0.3.jar:2.0.3]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87) ~[mybatis-3.5.3.jar:3.5.3]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:93) ~[mybatis-3.5.3.jar:3.5.3]
	at com.sun.proxy.$Proxy166.findByUserName(Unknown Source) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at com.sun.proxy.$Proxy167.findByUserName(Unknown Source) ~[?:?]
	at crw.bishe.team.service.TokenServiceImpl.loadUserByUsername(TokenServiceImpl.java:24) ~[classes/:?]
	at crw.bishe.team.service.TokenServiceImpl$$FastClassBySpringCGLIB$$415d523b.invoke(<generated>) ~[classes/:?]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.2.RELEASE.jar:5.2.2.RELEASE]
	at crw.bishe.team.service.TokenServiceImpl$$EnhancerBySpringCGLIB$$418d6379.loadUserByUsername(<generated>) ~[classes/:?]
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108) ~[spring-security-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 51 more
