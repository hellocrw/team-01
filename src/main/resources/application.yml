spring:
  datasource:
#    druid:
#      stat-view-servlet.enabled: true
#      stat-view-servlet.url-pattern: /druid/*
    #   数据源基本配置
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    # &useAffectedRows=true
    url: jdbc:mysql://120.79.191.236:3306/team?characterEncoding=utf-8&useSSL=true&serverTimezone=Asia/Shanghai
    type: com.alibaba.druid.pool.DruidDataSource
    #   数据源其他配置
    initialSize: 5
    minIdle: 5
    maxActive: 20
    #    配置获取连接等待超时的时间
    maxWait: 60000
#    配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒
    timeBetweenEvictionRunsMillis: 60000
#    配置一个连接在池中最小生存的时间，单位毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    #   打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,slf4j
    useGlobalDataSourceStat: true
    #   通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
  jackson:
    default-property-inclusion: non_null
#    date-format: java.text.SimpleDateFormat
  thymeleaf:
    cache: false
  mvc:
    view:
      suffix: .html
      prefix: /
# ========================redis=========================
  redis:
    #数据库索引
    database: 0
    host: 120.79.191.236
    port: 6379
    password:
    jedis:
      pool:
        #最大连接数
        max-active: 8
        #最大阻塞等待时间(负数表示没限制)
        max-wait: -1
        #最大空闲
        max-idle: 8
        #最小空闲
        min-idle: 0
    #连接超时时间
    timeout: 10000
  application:
    name: team-01
#    通过配置文件排除spring security 自动配置
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
  main:
    allow-bean-definition-overriding: true
# ========================elasticsearch=========================
  elasticsearch:
    rest:
      username: user
      password: 123456
      uris: http://127.0.0.1:9200
  # ========================mongodb============================
  data:
    mongodb:
      database: demo
      host: 120.79.191.236
      port: 27017
# ===========================kafka=============================
  kafka:
    bootstrap-servers: 120.79.191.236:9092
    listener:
      missing-topics-fatal: false
    # Producer
    producer:
      # 发生错误后，消息重发的次数
      retries: 0
      #  每次批量发送消息的数量
      #  当有多个消息需要被发送到同一分区时，生产者会把它放到同一批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算
      batch-size: 16384
      # 设置生产者内存缓冲区的大小
      buffer-memory: 33554432
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    # consumer
    consumer:
      # 指定默认消费者group id
      group-id: user-log-group
      auto-offset-reset: earliest
      enable-auto-commit: true
      auto-commit-interval: 100
      # 指定消息key和消息体的编解码方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

# 配置rabbitmq服务器
# ========================rabbitmq=============================
  rabbitmq:
    host: 120.79.191.236
    port: 5672
    username: ems
    password: 123
    # 虚拟host，可以不设置，使用server 默认host
    virtual-host: /ems
#      username: root
#      password: 123456

mybatis:
  # 指定sql映射文件位置
  mapper-locations: classpath:mapping/*.xml
  #mybatis
  configuration:
    map-underscore-to-camel-case: true #开启驼峰命名法
    #org.apache.ibatis.logging.stdout.StdOutImpl 控制台打印sql语句方便调试sql语句执行错误
    #org.apache.ibatis.logging.log4j2.Log4j2Impl:这个不在控制台打印查询结果,但是在log4j中打印
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  type-aliases-package: crw.bishe.team.entity

web:
  upload:
    image:
      path: e://wechat//image//
      type: 1
    video:
      path: e://wechat//video//
      type: 2
    speech:
      path: e://wechat//speech//
      type: 3

file:
  upload:
    url: D:/upload/

server:
  port: 8888
  servlet:
    session:
      timeout: 60m

config:
  jwt:
    # 加密密钥
    secret: secret
    # token有效时长，单位秒
    expire: 3600
    # header 名称
    headerKey: token
    token: Authorization

eureka:
  client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: http://localhost:7001/eureka

# 此处的Logger要使用feign中的
logging:
  level:
    crw.bishe.team.mapper: debug
      # feign日志以什么级别监控哪个接口
    crw.bishe.team.service.TestService: debug
pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true
  params: count=countSql
feign:
  hystrix:
    enabled: true

hystrix:
  metrics:
#    默认的超时时间设置
    polling-interval-ms: 2000
#    hystrix配置
    enabled: true

zookeeper:
  address: 120.79.191.236:2181
  timeout: 10000
